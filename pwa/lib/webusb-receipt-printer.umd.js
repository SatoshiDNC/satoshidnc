!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).WebUSBReceiptPrinter=t()}(this,(function(){"use strict";class e{constructor(e){this._events={}}on(e,t){this._events[e]=this._events[e]||[],this._events[e].push(t)}emit(e,...t){let n=this._events[e];n&&n.forEach((e=>{setTimeout((()=>e(...t)),0)}))}}const t=[{filters:[{vendorId:1046,productId:20497}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"zjiang"},{filters:[{vendorId:1049},{vendorId:5380}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"bixolon"},{filters:[{vendorId:1305}],configuration:1,interface:0,language:e=>{let t="star-line",n=e.productName;switch(n=n.replace(/^Star\s+/i,""),n=n.replace(/^TSP(1|4|6|7|8|10)(13|43)(.*)?$/,((e,t,n,i)=>"TSP"+t+"00"+(i||""))),n=n.replace(/^TSP(55|65)(1|4)(.*)?$/,((e,t,n,i)=>"TSP"+t+"0"+(i||""))),n=n.replace(/^TSP([0-9]+)(II|III|IV|V|VI)?(.*)?$/,((e,t,n)=>"TSP"+t+(n||""))),n){case"TSP100IV":case"mPOP":case"mC-Label3":case"mC-Print3":case"mC-Print2":t="star-prnt";break;case"TSP100":case"TSP100II":case"TSP100III":t="star-graphics";break;case"BSC10":case"BSC10BR":case"BSC10II":t="esc-pos"}return t},codepageMapping:"star"},{filters:[{vendorId:1208}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"epson"},{filters:[{vendorId:7568}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"citizen"},{filters:[{vendorId:4070,productId:33054}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"epson"},{filters:[{vendorId:8137,productId:8214}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"xprinter"}];return class{constructor(){this._internal={emitter:new e,device:null,profile:null,endpoints:{input:null,output:null}},navigator.usb.addEventListener("disconnect",(e=>{this._internal.device==e.device&&this._internal.emitter.emit("disconnected")}))}async connect(){try{let e=await navigator.usb.requestDevice({filters:t.map((e=>e.filters)).reduce(((e,t)=>e.concat(t)))});e&&await this.open(e)}catch(e){console.log("Could not connect! "+e)}}async reconnect(e){let t=await navigator.usb.getDevices(),n=t.find((t=>t.serialNumber==e.serialNumber));n||(n=t.find((t=>t.vendorId==e.vendorId&&t.productId==e.productId))),n&&await this.open(n)}async open(e){this._internal.device=e,this._internal.profile=t.find((e=>e.filters.some((e=>e.vendorId&&e.productId?e.vendorId==this._internal.device.vendorId&&e.productId==this._internal.device.productId:e.vendorId==this._internal.device.vendorId)))),await this._internal.device.open(),await this._internal.device.selectConfiguration(this._internal.profile.configuration),await this._internal.device.claimInterface(this._internal.profile.interface);let n=this._internal.device.configuration.interfaces.find((e=>e.interfaceNumber==this._internal.profile.interface));this._internal.endpoints.output=n.alternate.endpoints.find((e=>"out"==e.direction)),this._internal.endpoints.input=n.alternate.endpoints.find((e=>"in"==e.direction)),await this._internal.device.reset();let i=this._internal.profile.language;"function"==typeof i&&(i=i(this._internal.device)),this._internal.emitter.emit("connected",{type:"usb",manufacturerName:this._internal.device.manufacturerName,productName:this._internal.device.productName,serialNumber:this._internal.device.serialNumber,vendorId:this._internal.device.vendorId,productId:this._internal.device.productId,language:i,codepageMapping:this._internal.profile.codepageMapping})}async listen(){if(this._internal.device)try{const e=await this._internal.device.transferIn(this._internal.endpoints.input.endpointNumber,64);e instanceof USBInTransferResult&&e.data.byteLength&&this._internal.emitter.emit("data",e.data),this.listen()}catch(e){}}async disconnect(){this._internal.device&&(await this._internal.device.close(),this._internal.device=null,this._internal.profile=null,this._internal.emitter.emit("disconnected"))}async print(e){if(this._internal.device&&this._internal.endpoints.output)try{await this._internal.device.transferOut(this._internal.endpoints.output.endpointNumber,e)}catch(e){console.log(e)}}addEventListener(e,t){this._internal.emitter.on(e,t)}}}));
